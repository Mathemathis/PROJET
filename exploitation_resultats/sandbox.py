import pandas as pd
import matplotlib.pyplot as plt

def excel_to_csv():
    path = "results/resultats_compactebis"

    df = pd.read_excel(path + ".xlsx", sheet_name='Tabelle1')

    # Write data to CSV file
    df.to_csv(path + '.csv', index=False)


def mergedfCompacte():
    files = ["Yes",  "bis"]
    file1_path = "results/compacte/Compacte.csv" 
    merged_df = pd.read_csv(file1_path)

    merged_df['gap'] = (1 - merged_df['LB'] / merged_df['UB']) * 100
    

    for file in files:
        file2_path = "results/compacte/Compacte" + file + ".csv" 

        df2 = pd.read_csv(file2_path)
        for c in df2.columns :
            if c != 'Instance':
                df2 = df2.rename(columns={c: c + "_" + file})
        
        df2['gap_' + file] = (1 - df2['LB_' + file] / df2['UB_' + file]) *100


        merged_df = pd.merge(merged_df, df2, on='Instance', how='inner')  

        print("nb de lignes = ", merged_df.shape[0])
    
    # enlever les colonnes inutiles
    for c in merged_df.columns : 
        if c[:4] == 'Unna' or c[:8] == 'Solution' :
            merged_df.drop(columns=[c], inplace=True)
            print("c = ", c)
    

    merged_df[['Nb_noeuds', 'last_two_parts']] = merged_df['Instance'].str.split('_', expand=True)

    # Split the "last_two_parts" column by "." and extract the first and second parts
    merged_df[['second_part', 'third_part']] = merged_df['last_two_parts'].str.rsplit(".", n=1, expand=True)

    merged_df[['test1', 'Region']] = merged_df['second_part'].str.rsplit(".", n=1, expand=True)
    # Reorder the columns to place the new columns at the beginning
    merged_df = merged_df[['Nb_noeuds', 'Region'] + [col for col in merged_df.columns if col not in ['Instance','first_part', 'second_part', 'third_part', 'instance'  'test1', 'last_two_parts','test1','Region', 'Nb_noeuds']]]


    for c in merged_df.columns : 
        # round results
        if c[:5] == "Temps":
            merged_df[c] = merged_df[c].round(2)
        elif c[:2] == "LB" or c[:2] == "UB" :
            merged_df[c] = merged_df[c].round(0).astype(int)
        elif c[:3] == "gap" :
            merged_df[c] = merged_df[c].round(1)

    merged_df['Nb_noeuds'] = merged_df['Nb_noeuds'].astype(int)
    merged_df = merged_df.sort_values(by=['Nb_noeuds','Region'], ascending=True)

    merged_df.to_csv('./results/compacte/joined_results.csv', index=False)

    return(merged_df)

mergedfCompacte()

def mergedf():
    #files = ["dualAgregee", "dualNonAgregee",  "PlansCoupants", "PlansCoupantsBis", "heurDich", "heurVois6"]
    files = ["dualAgregee",  "PlansCoupants", "PlansCoupantsBis", "heurDich", "heurVois6"]
    file1_path = "results/BranchCut.csv" 
    merged_df = pd.read_csv(file1_path)

    for c in merged_df.columns :
            if c != 'Instance':
                merged_df = merged_df.rename(columns={c: c + "_BC"})

    merged_df['gap_BC'] = (1 - merged_df['Borne inf_BC'] / merged_df['Meilleure solution_BC']) * 100
    
        


    for file in files:
        file2_path = "results/" + file + ".csv" 

        df2 = pd.read_csv(file2_path)
        for c in df2.columns :
            if c != 'Instance':
                df2 = df2.rename(columns={c: c + "_" + file})
        
        if file in ["dualAgregee", "dualNonAgregee",  "PlansCoupants", "PlansCoupantsBis"]:
            df2['gap_' + file] = (1 - df2['Borne inf_' + file] / df2['Meilleure solution_' + file]) *100


        merged_df = pd.merge(merged_df, df2, on='Instance', how='inner')  
            


        print("nb de lignes = ", merged_df.shape[0])
    
    # enlever les colonnes inutiles
    for c in merged_df.columns : 
        if c[:4] == 'iter' or c[:8] == 'Solution' or c[:6] == 'Coupes' or c[:7] == "nb_iter" or c[:4] == "RÃ©so":
            merged_df.drop(columns=[c], inplace=True)
            print("c = ", c)
    

    merged_df[['Nb_noeuds', 'last_two_parts']] = merged_df['Instance'].str.split('_', expand=True)

    # Split the "last_two_parts" column by "." and extract the first and second parts
    merged_df[['second_part', 'third_part']] = merged_df['last_two_parts'].str.rsplit(".", n=1, expand=True)

    merged_df[['test1', 'Region']] = merged_df['second_part'].str.rsplit(".", n=1, expand=True)
    # Reorder the columns to place the new columns at the beginning
    merged_df = merged_df[['Nb_noeuds', 'Region'] + [col for col in merged_df.columns if col not in ['Instance','first_part', 'second_part', 'third_part', 'instance'  'test1', 'last_two_parts','test1','Region', 'Nb_noeuds']]]


    for c in merged_df.columns : 
        # round results
        if c[:5] == "Temps":
            merged_df[c] = merged_df[c].round(2)
        elif c[:5] == "Borne" or c[:5] == "Meill" :
            merged_df[c] = merged_df[c].round(0).astype(int)
        elif c[:3] == "gap" :
            merged_df[c] = merged_df[c].round(1)

    merged_df['Nb_noeuds'] = merged_df['Nb_noeuds'].astype(int)
    merged_df = merged_df.sort_values(by=['Nb_noeuds','Region'], ascending=True)

    merged_df.to_csv('./results/joined_results.csv', index=False)

    return(merged_df)


def finalresults():
    names = ["BC", "dualAgregee",  "PlansCoupants", "PlansCoupantsBis"]
    df = mergedf()
    # tableau PLNE

    PLNE_columns = [c for c in df.columns if c[-5:] != 'Vois6' and c[-4:] != "Dich"]
    df_PLNE = df[PLNE_columns]


    Heur_columns =  ["Nb_noeuds","Region"] + [c for c in df.columns if c[-5:] == 'Vois6' or c[-4:] == "Dich"]
    df_HEUR = df[Heur_columns].copy()
    PLNE_bestsol  = ["Meilleure solution_" + c for c in names]
    min_values = df[PLNE_bestsol].min(axis=1)
    df_HEUR.insert(loc = 2, column = 'bestub', value = min_values)

            
    df_PLNE.to_csv('./results/resPLNE.csv', index=False)
    df_HEUR.to_csv('./results/resHEUR.csv', index=False)

def compareHeur():
    merged_df = pd.read_csv('./results/resHEUR.csv')
    heurDichbetter = (merged_df['Meilleure solution_heurDich'] < merged_df['Meilleure solution_heurVois6']).sum()
    heurVoisbetter = (merged_df['Meilleure solution_heurVois6'] < merged_df['Meilleure solution_heurDich']).sum()

    print(" Dich fait mieux :", heurDichbetter)
    print("Vois fait mieux:", heurVoisbetter)


    c1_mean = merged_df['Meilleure solution_heurDich'].mean()
    c2_mean = merged_df['Meilleure solution_heurVois6'].mean()
    print("Mean for the column 'Dich':", c1_mean)
    print("Mean for the column 'Vois':", c2_mean)


    plt.scatter(merged_df['Temps_heurDich'], merged_df['Meilleure solution_heurDich'], color='blue', label='HeurDich')

    # Plot data from the second set of columns (time2 and result2)
    plt.scatter(merged_df['Temps_heurVois6'], merged_df['Meilleure solution_heurVois6'], color='red', label='HeurVois')
    plt.xscale('log')

    plt.xlabel('Temps')
    plt.ylabel('Valeur solution')
    plt.title('Comparaison des heuristiques')

    # Add legend
    plt.legend()

    # Show plot
    plt.show()

